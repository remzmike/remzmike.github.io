var _blog_post;
var _blog_posts = [];
var _blog_posts_by_title = {};
_blog_post = {
    'content' : `
<p>
    Ported my simpleui library to plain javascript and made a driver for the html5 canvas.
    (<a href='../simpleui'>live demo</a>)
</p>
 <a href="simpleui-js-alpha-full.png"><img border="0" src="simpleui-js-alpha-crop.png"></a>
 `,
    'title' : "simpleui.js",
    'published' : "2016-10-08T11:45:00.002-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['simpleui.js'] = _blog_post;
_blog_post = {
    'content' : `
<p>
    Wrote a python module for creating these svg stock charts.
</p>
 <a href="chartk1-screenshot.png"><img border="0" src="chartk1-screenshot.png"></a>
 `,
    'title' : "PxV chart",
    'published' : "2017-01-31T11:45:00.002-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['PxV chart'] = _blog_post;
_blog_post = {
    'content' : `
<p>My tcp and udp port scanner, using non-blocking sockets. </p> <a href="https://github.com/remzmike/python-kports-portscanner/blob/master/kports.py">https://github.com/remzmike &gt; kports.py</a> <p>The tcp scan is a simple connect scan using epoll. </p> <p>The udp scan is more complicated. A closed port is one where subsequent sends throw an ECONNREFUSED errno. This is effectively detecting ICMP "Destination Unreachable" type 3 code 3 errors. An open port is one where a udp response is received. A port may also be "possibly open" due to the lack of a response or error from the target. These are returned as a separate list by udp_scan_ex. </p> <p>The advanced udp scan also accounts for rate-limiting of ICMP port unreachable errors at the target. Because of this, advanced scanning of 1024 udp ports can take around 20 minutes using udp_scan_ex with the default arguments. </p> <p>HOWEVER, this script will do a faster udp scan by default, checking for responsive, obviously open ports. The udp_scan function makes a special call to udp_scan_ex effectively disabling the advanced scanning features. </p> <p>This udp scanning technique is called the "lame" udp scan by nmap. </p> <p>You can modify some of this behavior using the global constants. </p> <pre><br />Examples:<br />1) python kports.py 1.2.3.4<br />{<br />                'target': '64.157.211.4',<br />                'status': 'valid ip',<br />                'tcp': [22,23,80,443],<br />                'udp': [ ]<br />}<br /><br />2) python kports.py www.ibm.com<br />{<br />                'target': 'www.ibm.com',<br />                'status': 'fqdn resolves',<br />                'tcp': [22,23,80,443],<br />                'udp': [53]<br />}<br /><br />3) python kports.py www.sdsds.xxz<br />{<br />                'target': 'www.sdsds.xxz',<br />                'status': 'fqdn does not resolve'<br />}<br /></pre>`,
    'title' : "kports",
    'published' : "2016-03-23T13:59:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['kports'] = _blog_post;
_blog_post = {
    'content' : `
<p>Lua libraries and win32api module patch.</p> <p>SendInput - send mouse and keyboard events to windows processes</p><p>SendInputScheduled - sleep-free mouse/keyboard scheduling</p><ul><li>Mirrors and wraps my SendInput.lua api.</li><li>Adds one function, wait(ms), which delays all subsequently scheduled events.</li></ul> <p><a href="https://github.com/remzmike/lua-sendinput">https://github.com/remzmike/lua-sendinput</a></p> <p>Example, opens notepad and sends test events:</p><div class="source"><pre><span class="nx">require</span> <span class="s1">&#39;SKeys&#39;</span><br /><span class="nx">print</span><span class="p">(</span><span class="s1">&#39;testing...&#39;</span><span class="p">)</span><br /><span class="nx">local</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">winapi</span><span class="p">.</span><span class="nx">spawn_process</span><span class="p">(</span><span class="s1">&#39;notepad&#39;</span><span class="p">)</span><br /><span class="nx">p</span><span class="o">:</span><span class="nx">wait_for_input_idle</span><span class="p">()</span><br /><span class="nx">local</span> <span class="nx">w</span> <span class="o">=</span> <span class="nx">winapi</span><span class="p">.</span><span class="nx">find_window_match</span><span class="p">(</span><span class="s1">&#39;Untitled&#39;</span><span class="p">)</span><br /><span class="nx">w</span><span class="o">:</span><span class="nx">show</span><span class="p">()</span><br /><span class="nx">w</span><span class="o">:</span><span class="nx">set_foreground</span><span class="p">()</span><br /><span class="nx">winapi</span><span class="p">.</span><span class="nx">send_to_window</span><span class="p">(</span><span class="s1">&#39;testing...&#39;</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">key_press</span><span class="p">(</span><span class="nx">SKeys</span><span class="p">.</span><span class="nx">Return</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">key_down</span><span class="p">(</span><span class="nx">SKeys</span><span class="p">.</span><span class="nx">LShift</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">key_press</span><span class="p">(</span><span class="nx">SKeys</span><span class="p">.</span><span class="nx">H</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">key_up</span><span class="p">(</span><span class="nx">SKeys</span><span class="p">.</span><span class="nx">LShift</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">key_press</span><span class="p">(</span><span class="nx">SKeys</span><span class="p">.</span><span class="nx">E</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">key_press</span><span class="p">(</span><span class="nx">SKeys</span><span class="p">.</span><span class="nx">L</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">key_press</span><span class="p">(</span><span class="nx">SKeys</span><span class="p">.</span><span class="nx">L</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span><br /><span class="nx">winapi</span><span class="p">.</span><span class="nx">send_to_window</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">key_press</span><span class="p">(</span><span class="nx">SKeys</span><span class="p">.</span><span class="nx">Return</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">mouse_move</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><br /><span class="k">for</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span> <span class="k">do</span><br />    <span class="nx">winapi</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>        <br />    <span class="nx">M</span><span class="p">.</span><span class="nx">mouse_move_relative</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span><br />    <span class="nx">M</span><span class="p">.</span><span class="nx">mouse_press</span><span class="p">(</span><span class="s1">&#39;right&#39;</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span><br /><span class="nx">end</span><br /><span class="nx">winapi</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">mouse_move</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><br /><span class="nx">winapi</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">mouse_move</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span><br /><span class="nx">M</span><span class="p">.</span><span class="nx">mouse_press</span><span class="p">(</span><span class="s1">&#39;right&#39;</span><span class="p">,</span> <span class="mi">600</span><span class="p">)</span><br /></pre></div>`,
    'title' : "sendinput",
    'published' : "2016-03-14T15:22:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['sendinput'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">
<p>Wrote code to make unique user glyphs, after staring at gravatar identicons.</p>
<p><img height="16" src="source.png" width="16" /><a href="https://github.com/remzmike/python-userglyph/blob/master/userglyph.py">userglyph.py</a></p>
<p>My current glyphset yields 4,373,111,808 unique images.</p>

<p>
<img height="16" src="image.png" width="16" />
<a href="userglyph_glyphset.png">my glyphset</a>
</p>

<p>Example outputs:</p>

<p>
<img height="64" src="userglyph-0_23_20_1.png" width="64" />
<img height="64" src="userglyph-107_28_132_3.png" width="64" />
<img height="64" src="userglyph-21_29_87_1a.png" width="64" />
<img height="64" src="userglyph-23_11_41_1.png" width="64" />
<img height="64" src="userglyph-26_29_45_2.png" width="64" />
<img height="64" src="userglyph-28_52_70_1.png" width="64" />
<img height="64" src="userglyph-47_24_110_3.z.png" width="64" />
<img height="64" src="userglyph-82_63_85_2.png" width="64" />
<img height="64" src="userglyph-83_30_94_2.png" width="64" />
<img height="64" src="userglyph-99_16_2_3.png" width="64" />
</p>

</div>`,
    'title' : "unique user glyphs",
    'published' : "2012-12-01T12:31:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['unique user glyphs'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">                          <p>Modified my sansa parser and msansa to support Clip+ and Clip Zip.</p><img src="source.png" width="16" height="16"> <a href="https://github.com/remzmike/python-sansa-clip-metadata/blob/master/sansa_triple.py">sansa_triple.py</a><br><p>Both unicode and ascii strings are written in character pairs and double null terminated.<br />The last character in ascii strings of uneven length is paired with a null byte.<br />So, ascii strings of uneven length will have three nulls after their last character.</p><p>Item index begins at:</p><ul><li>clip: 0x27</li><li>clip+: 0x23</li><li>clip zip: 0x2f</li></ul><p>Stop reading items when starting bytes are 0x0000.</p><p>An item:</p><div class="source"><pre><code>1 byte   : a<br />1 byte   : b<br />15 bytes (7 bytes on clip zip)<br />string   : pathname<br />string   : filename<br />string   : title<br />string   : artist<br />string   : album<br />2 bytes  : 0xffff -or- extra string (if first bytes are not 0xffff)<br />string   : genre<br />13 bytes -or- 7 bytes (if first byte is 0x00)<br /></code></pre></div>  <p>Meta index is at:</p><ul><li>clip: 0x148238 in MTABLE.SYS</li><li>clip+: 0x77d in RES_INFO.SYS</li><li>clip zip: 0x77d in RES_INFO.SYS</li></ul><p>Stop reading metas when starting byte is not 0x80.</p><p>A meta record:</p><div class="source"><pre><code>1 byte : 0x80<br />1 byte : rating<br />1 byte : meta b<br />1 byte : meta c<br /></code></pre></div>         </div>`,
    'title' : "parse more sansa ratings",
    'published' : "2012-11-15T12:31:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['parse more sansa ratings'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">                          <p>Wrote an irc client from scratch in standard python. Single thread. Synchronous IO. ~400 lines.</p><a href="irc.png"><img src="irc.png" border="0" width="987" height="487"></a><p>Snippet:</p><div class="source"><pre><code><span class="k">def</span> <span class="nf">recv</span><span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1024</span><span class="p">):</span><br />    <span class="k">try</span><span class="p">:</span><br />        <span class="n">data</span> <span class="o">=</span> <span class="n">cx</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><br />    <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span><br />        <span class="n">data</span> <span class="o">=</span> <span class="bp">None</span><br />        <span class="k">if</span> <span class="n">ex</span><span class="o">.</span><span class="n">errno</span> <span class="o">==</span> <span class="mi">10035</span><span class="p">:</span><br />            <span class="k">pass</span><br />        <span class="k">else</span><span class="p">:</span><br />            <span class="k">raise</span> <span class="n">ex</span><br />    <span class="k">return</span> <span class="n">data</span><br /><br /><span class="o">...</span><br /><br /><span class="k">while</span> <span class="ow">not</span> <span class="n">_exiting</span><span class="p">:</span><br /><br />    <span class="n">data_recv</span> <span class="o">=</span> <span class="n">recv</span><span class="p">(</span><span class="n">cx</span><span class="p">)</span><br /><br />    <span class="k">if</span> <span class="n">data_recv</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span><br /><br />        <span class="o">...</span><br /><br />    <span class="k">while</span> <span class="n">kbhit</span><span class="p">():</span><br /><br />        <span class="o">...</span><br /><br />    <span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span><br /><br /><span class="n">cx</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>   <br /></code></pre></div>         </div>`,
    'title' : "irc client one",
    'published' : "2012-11-14T12:30:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['irc client one'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">                         <p>Wrote code to encode data in images. No obvious visual difference. No research.</p><p>First technique: Encode data as the difference between two images. </p><img src="source.png" width="16" height="16"> <a href="https://github.com/remzmike/python-imgencode/blob/master/imgencode.py">imgencode.py</a><br>
<img src="image.png" width="16" height="16">
<a href="imgencode-input.png">imgencode-input.png</a><br>
<img src="image.png" width="16" height="16">
<a href="imgencode-output.png">imgencode-output.png</a><br>
<p>Side by side:</p><img src="imgencode-input.png" width="275" height="297">
<img src="imgencode-output.png" width="275" height="297">
<p>Second technique: Store the same data as byte parity in a single image.</p><img src="source.png" width="16" height="16">
<a href="https://github.com/remzmike/python-imgencode/blob/master/imgencode2.py">imgencode2.py</a><br><img src="image.png" width="16" height="16"> <a href="imgencode-output2.png">imgencode-output2.png</a><br><p>These images are "full" of encoded data, 6125 instances of the string "hello".</p><p>Snippet:</p><div class="source"><pre><code><span class="k">def</span> <span class="nf">encode_into_image</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span><br /><br />    <span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s">&quot;RGBA&quot;</span><span class="p">)</span><br /><br />    <span class="k">if</span> <span class="ow">not</span> <span class="n">can_fit_message</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span><br />        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;message too large to be encoded in this image&quot;</span><span class="p">)</span><br /><br />    <span class="n">data</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">getdata</span><span class="p">()</span><br /><br />    <span class="n">newdata</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span><br />    <span class="n">bits</span> <span class="o">=</span> <span class="n">get_bits</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>    <br />    <span class="n">bits</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span> <span class="c"># delimit with null byte</span><br />    <span class="n">bitcount</span> <span class="o">=</span> <span class="mi">0</span><br /><br />    <span class="k">for</span> <span class="n">px</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span><br />        <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">px</span><span class="p">):</span><br />            <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> <span class="k">continue</span> <span class="c"># skip alpha</span><br />            <span class="k">if</span> <span class="n">bitcount</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">bits</span><span class="p">):</span><br />                <span class="n">bit</span> <span class="o">=</span> <span class="n">bits</span><span class="p">[</span><span class="n">bitcount</span><span class="p">]</span><br />                <span class="n">bitcount</span> <span class="o">+=</span> <span class="mi">1</span><br />            <span class="k">else</span><span class="p">:</span><br />                <span class="n">bit</span> <span class="o">=</span> <span class="bp">None</span><br /><br />            <span class="k">if</span> <span class="n">bit</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span><br />                <span class="n">rand</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span><br />                <span class="n">newval</span> <span class="o">=</span> <span class="n">val</span><br />                <span class="k">if</span> <span class="n">bit</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">val</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> \<br />                <span class="ow">or</span> <span class="n">bit</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">val</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span><br />                    <span class="n">newval</span> <span class="o">+=</span> <span class="n">rand</span><br /><br />                <span class="k">if</span> <span class="n">newval</span> <span class="o">&gt;</span> <span class="mi">255</span><span class="p">:</span><br />                    <span class="n">newval</span> <span class="o">=</span> <span class="mi">254</span><br />                <span class="k">elif</span> <span class="n">newval</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span><br />                    <span class="n">newval</span> <span class="o">=</span> <span class="mi">1</span><br />                <span class="n">px</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">px</span><span class="p">)</span><br />                <span class="n">px</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">newval</span><br />                <span class="n">px</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">px</span><span class="p">)</span><br /><br />        <span class="n">newdata</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">px</span><span class="p">)</span><br /><br />    <span class="n">img</span><span class="o">.</span><span class="n">putdata</span><span class="p">(</span><span class="n">newdata</span><span class="p">)</span><br />    <span class="k">return</span> <span class="n">img</span><br /></code></pre></div>         </div>`,
    'title' : "imgencode",
    'published' : "2012-10-29T12:29:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['imgencode'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">
<p>Wrote code to relay messages received on a remote instant messenger.</p>
<p>1) javascript plugin on remote messenger submits messages to a url</p>

<div class="source"><pre><code><span class="kd">function</span> <span class="nx">OnEvent_ChatWndReceiveMessage</span><span class="p">(</span><span class="nx">pChatWnd</span><span class="p">,</span> <span class="nx">sOrigin</span><span class="p">,</span> <span class="nx">sMessage</span><span class="p">,</span> <span class="nx">nKind</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="p">...</span><br />    <span class="nx">SubmitMessage</span><span class="p">(</span><span class="nx">sOrigin</span><span class="p">,</span> <span class="nx">sMessage</span><span class="p">);</span><br />    <span class="p">...</span><br /><span class="p">}</span><br /><br /><span class="kd">function</span> <span class="nx">SubmitMessage</span><span class="p">(</span><span class="nx">origin</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="p">...</span><br />    <span class="nx">DownloadFile</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span><br /><span class="p">}</span><br /><br /><span class="kd">function</span> <span class="nx">OnEvent_DownloadFileComplete</span><span class="p">(</span><span class="nx">Url</span><span class="p">,</span> <span class="nx">OutFile</span><span class="p">,</span> <span class="nx">Success</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="k">if</span><span class="p">(</span><span class="nx">Success</span><span class="p">)</span><br />    <span class="p">{</span><br />        <span class="c1">//Delete the temporary file</span><br />        <span class="kd">var</span> <span class="nx">File</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">"Scripting.FileSystemObject"</span><span class="p">);</span><br />        <span class="nx">File</span><span class="p">.</span><span class="nx">DeleteFile</span><span class="p">(</span><span class="nx">OutFile</span><span class="p">);</span><br />    <span class="p">}</span><br /><span class="p">}</span><br /></code></pre></div>2) php script accepts input, provides output, via http<br /><div class="source"><pre><code><span class="cp">&lt;?</span><br /><span class="k">if</span> <span class="p">(</span><span class="nv">$action</span><span class="o">==</span><span class="k">null</span> <span class="o">||</span> <span class="nv">$action</span><span class="o">==</span><span class="s1">'view'</span><span class="p">)</span><br /><span class="p">{</span><br />  <span class="nv">$data</span> <span class="o">=</span> <span class="nx">readfromfile</span><span class="p">(</span><span class="nv">$logpath</span><span class="p">);</span><br />  <span class="k">echo</span><span class="p">(</span><span class="s1">'&lt;pre&gt;'</span><span class="o">.</span><span class="nv">$data</span><span class="o">.</span><span class="s1">'&lt;/pre&gt;'</span><span class="p">);</span><br /><span class="p">}</span><br /><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$action</span><span class="o">==</span><span class="s1">'submit'</span><span class="p">)</span><br /><span class="p">{</span><br />  <span class="nv">$timestamp</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">'l, F j, Y @ h:i:s A'</span><span class="p">);</span><br />  <span class="nv">$logline</span> <span class="o">=</span> <span class="nv">$timestamp</span> <span class="o">.</span> <span class="s1">' - '</span> <span class="o">.</span> <span class="nv">$origin</span> <span class="o">.</span> <span class="s1">' - '</span> <span class="o">.</span> <span class="nv">$message</span> <span class="o">.</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span><br />  <span class="nx">writetofile</span><span class="p">(</span><span class="s1">'ab'</span><span class="p">,</span> <span class="nv">$logpath</span><span class="p">,</span> <span class="nv">$logline</span><span class="p">);</span><br /><span class="p">}</span><br /><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$action</span><span class="o">==</span><span class="s1">'pop'</span><span class="p">)</span><br /><span class="p">{</span><br />  <span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$logpath</span><span class="p">,</span> <span class="s1">'r+b'</span><span class="p">);</span><br />  <span class="nb">flock</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nx">LOCK_EX</span><span class="p">);</span><br />  <span class="nv">$logsize</span> <span class="o">=</span> <span class="nb">filesize</span><span class="p">(</span><span class="nv">$logpath</span><span class="p">);</span><br />  <span class="k">if</span> <span class="p">(</span><span class="nv">$logsize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span><br />  <span class="p">{</span><br />    <span class="nv">$data</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nv">$logsize</span><span class="p">);</span><br />    <span class="k">echo</span> <span class="nv">$data</span><span class="p">;</span><br />    <span class="nv">$keep</span> <span class="o">=</span> <span class="nx">url_get_param</span><span class="p">(</span><span class="s1">'keep'</span><span class="p">);</span><br />    <span class="k">if</span> <span class="p">(</span><span class="nv">$keep</span><span class="o">!=</span><span class="s1">'1'</span><span class="p">)</span><br />    <span class="p">{</span><br />      <span class="nb">ftruncate</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><br />    <span class="p">}</span><br />  <span class="p">}</span><br />  <span class="nb">flock</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nx">LOCK_UN</span><span class="p">);</span><br />  <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span><br /><span class="p">}</span><br /><span class="cp">?&gt;</span><span class="x"></span><br /></code></pre></div>

<p>3) c# tasktray app notifies of new messages</p>
<img height="181" src="messages.png" width="446" />         </div>`,
    'title' : "message relay",
    'published' : "2012-10-25T12:28:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['message relay'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">                          <p>Automatically copy appropriate data files from Sansa Clip, Clip+ and Clip Zip when inserted. Tasktray.</p><img src="msansa.png" width="526" height="476"><p>Using Win32 message WM_DEVICECHANGE.</p><div class="source"><pre><code><span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">Msg</span> <span class="p">==</span> <span class="n">WM_DEVICECHANGE</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">WParam</span> <span class="p">==</span> <span class="n">P_DBT_DEVICEARRIVAL</span><span class="p">)</span><br />    <span class="p">{</span><br />        <span class="n">DEV_BROADCAST_HDR</span> <span class="n">hdr</span> <span class="p">=</span> <span class="p">(</span><span class="n">DEV_BROADCAST_HDR</span><span class="p">)</span><span class="n">m</span><span class="p">.</span><span class="n">GetLParam</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DEV_BROADCAST_HDR</span><span class="p">));</span><br />        <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="p">.</span><span class="n">dbch_DeviceType</span> <span class="p">==</span> <span class="n">DBT_DEVTYP_VOLUME</span><span class="p">)</span><br />        <span class="p">{</span><br />            <span class="n">DEV_BROADCAST_VOLUME</span> <span class="n">vol</span> <span class="p">=</span> <span class="p">(</span><span class="n">DEV_BROADCAST_VOLUME</span><span class="p">)</span><span class="n">m</span><span class="p">.</span><span class="n">GetLParam</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DEV_BROADCAST_VOLUME</span><span class="p">));</span><br />            <span class="k">if</span> <span class="p">((</span><span class="n">vol</span><span class="p">.</span><span class="n">dbcv_flags</span> <span class="p">&amp;</span> <span class="n">DBTF_MEDIA</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span><br />            <span class="p">{</span><br />                <span class="kt">var</span> <span class="n">unitmask</span> <span class="p">=</span> <span class="n">vol</span><span class="p">.</span><span class="n">dbcv_unitmask</span><span class="p">;</span><br />                <span class="kt">var</span> <span class="n">letters</span> <span class="p">=</span> <span class="n">GetDriveLettersFromMask</span><span class="p">(</span><span class="n">unitmask</span><span class="p">);</span><br />                <span class="n">CheckDriveLetters</span><span class="p">(</span><span class="n">letters</span><span class="p">);</span><br />            <span class="p">}</span><br />        <span class="p">}</span><br />    <span class="p">}</span><br /><span class="p">}</span><br /></code></pre></div>  <p>And some interesting bitmasking to get drive letters.</p><div class="source"><pre><code><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">char</span><span class="p">&gt;</span> <span class="n">GetDriveLettersFromMask</span><span class="p">(</span><span class="n">UInt32</span> <span class="n">unitmask</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">char</span><span class="p">&gt;();</span><br /><br />    <span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">26</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span><br />    <span class="p">{</span><br />        <span class="k">if</span> <span class="p">((</span><span class="n">unitmask</span> <span class="p">&amp;</span> <span class="m">0</span><span class="n">x1</span><span class="p">)</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span><br />        <span class="p">{</span><br />            <span class="kt">var</span> <span class="n">letter</span> <span class="p">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span> <span class="p">+</span> <span class="m">65</span><span class="p">);</span><br />            <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">letter</span><span class="p">);</span><br />        <span class="p">}</span><br />        <span class="n">unitmask</span> <span class="p">=</span> <span class="n">unitmask</span> <span class="p">&gt;&gt;</span> <span class="m">1</span><span class="p">;</span><br />    <span class="p">}</span><br /><br />    <span class="k">return</span> <span class="n">result</span><span class="p">;</span><br /><span class="p">}</span><br /></code></pre></div>  <p>Notes:</p><ul><li>11/5/2012 - Updated to support Clip Zip</li><li>11/15/2012 - Updated to support Clip+</li></ul>         </div>`,
    'title' : "msansa",
    'published' : "2012-08-01T12:25:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['msansa'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">         <p>Reverse engineered the Sansa Clip MTABLE.SYS file so I can get ratings data.</p><img src="source.png" width="16" height="16"> <a href="https://github.com/remzmike/python-sansa-clip-metadata/blob/master/sansa.py">sansa.py</a><br><p>Both unicode and ascii strings are written in character pairs and double null terminated.<br />The last character in ascii strings of uneven length is paired with a null byte.<br />So, ascii strings of uneven length will have three nulls after their last character.</p><p>Item index begins at 40th byte.</p><p>Stop reading items when starting bytes are 0x0000.</p><p>An item:</p><div class="source"><pre><code>1 byte   : a<br />1 byte   : b<br />15 bytes <br />string   : pathname<br />string   : filename<br />string   : title<br />string   : artist<br />string   : album<br />2 bytes  : 0xffff -or- extra string (if first bytes are not 0xffff)<br />string   : genre<br />13 bytes -or- 7 bytes (if first byte is 0x00)<br /></code></pre></div>  <p>Meta index begins at 0x148238.</p><p>Stop reading metas when starting byte is not 0x80.</p><p>A meta record:</p><div class="source"><pre><code>1 byte : 0x80<br />1 byte : rating<br />1 byte : meta b<br />1 byte : meta c<br /></code></pre></div>         </div>`,
    'title' : "parse sansa clip ratings",
    'published' : "2012-07-25T12:24:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['parse sansa clip ratings'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">Artificially slow image streaming in python flask.<br /><br /><div class="separator" style="clear: both; text-align: center;"><iframe width="128" height="160" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/Uiiz-60KcXU/0.jpg" src="https://www.youtube.com/embed/Uiiz-60KcXU?feature=player_embedded" frameborder="0" allowfullscreen></iframe></div><br />Snippet:<br /><div class="source"><pre><code><span class="k">def</span> <span class="nf">iter_image</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span> <span class="n">yields</span><span class="p">,</span> <span class="n">seconds</span><span class="p">):</span><br />    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'static/'</span><span class="o">+</span><span class="n">fn</span><span class="p">,</span><span class="s">'rb'</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><br />    <span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><br />    <span class="n">gen</span> <span class="o">=</span> <span class="n">iter_image_generator</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">yields</span><span class="p">,</span> <span class="n">seconds</span><span class="p">)</span><br />    <span class="n">response</span> <span class="o">=</span> <span class="n">make_response</span><span class="p">(</span><span class="n">gen</span> <span class="p">,</span><span class="s">"200 OK"</span><span class="p">)</span><br />    <span class="n">response</span><span class="o">.</span><span class="n">content_length</span> <span class="o">=</span> <span class="n">size</span><br />    <span class="n">response</span><span class="o">.</span><span class="n">mimetype</span> <span class="o">=</span> <span class="s">'image/png'</span><br />    <span class="n">response</span><span class="o">.</span><span class="n">cache_control</span><span class="o">.</span><span class="n">no_cache</span> <span class="o">=</span> <span class="bp">True</span>    <br />    <span class="k">return</span> <span class="n">response</span><br /><br /><span class="k">def</span> <span class="nf">iter_image_generator</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">yields</span><span class="p">,</span> <span class="n">seconds</span><span class="p">):</span><br />    <span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><br />    <span class="n">span</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span> <span class="n">size</span> <span class="o">/</span> <span class="n">yields</span> <span class="p">)</span> <span class="p">)</span><br />    <span class="n">sleeptime</span> <span class="o">=</span> <span class="n">seconds</span> <span class="o">/</span> <span class="n">yields</span><br />    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">yields</span><span class="p">):</span><br />        <span class="n">a</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">span</span><br />        <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">+</span><span class="n">span</span><br />        <span class="n">block</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">a</span><span class="p">:</span><span class="n">b</span><span class="p">]</span> <span class="c"># overslice</span><br />        <span class="k">yield</span> <span class="n">block</span><br />        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">sleeptime</span><span class="p">)</span><br /></code></pre></div></div>`,
    'title' : "slow image",
    'published' : "2012-05-22T12:19:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['slow image'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">         <p>C++ and AGG. Download <a href="https://github.com/remzmike/cpp-antigrain-linestar-ui/blob/master/linestar_ui.exe">linestar_ui.exe</a>. 3 hours, with breakfast.</p><a href="linestar-ui.png"><img src="linestar-ui.png" border="0" width="606" height="725"></a>         </div>`,
    'title' : "linestar ui",
    'published' : "2012-05-13T12:18:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['linestar ui'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">     <p>Snapple Real Fact #804: There are 293 ways to make change for a dollar.</p><img src="source.png" width="16" height="16"> <a href="change.py">change.py</a><br><p>Basically:</p><div class="source"><pre><code><span class="k">def</span> <span class="nf">a1</span><span class="p">():</span><br /><br />    <span class="n">combinations</span> <span class="o">=</span> <span class="p">[]</span><br /><br />    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="o">//</span><span class="mi">100</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><br />        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="o">//</span><span class="mi">50</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><br />            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="o">//</span><span class="mi">25</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><br />                <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="o">//</span><span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><br />                    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="o">//</span><span class="mi">5</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><br />                        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="o">//</span><span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><br />                            <span class="n">amt</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">+</span> <span class="n">b</span> <span class="o">*</span> <span class="mi">50</span> <span class="o">+</span> <span class="n">c</span> <span class="o">*</span> <span class="mi">25</span> <span class="o">+</span> <span class="n">d</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">e</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">+</span> <span class="n">f</span> <span class="o">*</span> <span class="mi">1</span><br />                            <span class="k">if</span> <span class="n">amt</span><span class="o">==</span><span class="mi">100</span><span class="p">:</span><br />                                <span class="n">combinations</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">f</span><span class="p">])</span><br />                                <span class="k">break</span><br /><br />    <span class="k">return</span> <span class="n">combinations</span><br /></code></pre></div>  <p>Microbench:</p><table><thead><tr><th>fn</th><th align="right">cpython</th><th align="right">pypy 1.7</th><th align="right">pypy 1.8</th></tr></thead><tbody><tr><td>a1</td><td align="right">2467x</td><td align="right">98x</td><td align="right">24x</td></tr><tr><td>a2</td><td align="right">81x</td><td align="right">1.5x</td><td align="right">3.6x</td></tr><tr><td>a3</td><td align="right">8x</td><td align="right">1.3x</td><td align="right">1.5x</td></tr><tr><td>a4</td><td align="right">8x</td><td align="right"><b>1.0x</b></td><td align="right">1.5x</td></tr></tbody></table><p>And for people who thought this was about math:</p><div class="source"><pre><code><span class="k">def</span> <span class="nf">donk</span><span class="p">():</span>    <br />    <span class="n">kvalues</span> <span class="o">=</span> <span class="p">[]</span><br />    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><br />        <span class="n">value</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">k</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><br />        <span class="n">kvalues</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><br />    <span class="n">q</span> <span class="o">=</span> <span class="p">[]</span><br />    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span><br />        <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">kvalues</span><span class="p">[:</span><span class="n">v</span><span class="o">*</span><span class="mi">5</span><span class="o">+</span><span class="mi">1</span><span class="p">]))</span><br />    <span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><br />    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><br /></code></pre></div>  <p>Or, found online, where d is number of dollars:</p><p><code>(1 + d) * (6 + 121 * d + 362 * d**2 + 310 * d**3 + 80 * d**4 ) / 6</code></p><p>See the second half of <a href="change.py">the code</a> for more, and <a href="http://www.wolframalpha.com/input/?i=Series[1%2F%28+%281-x%29*%281-x^5%29*%281-x^10%29*%281-x^25%29*%281-x^50%29*%281-x^100%29+%29%2C+{x%2C+0%2C+100}]">wolfram|alpha</a>, 100th coefficient.</p>         </div>`,
    'title' : "change for a dollar",
    'published' : "2012-05-03T12:16:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['change for a dollar'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">                     <p>Wrote code to draw this.</p><!-- todo: solution for this, with the same border on flvs --> <!-- [![](/weblog/static/geo-sales-preview.png)](/weblog/static/geo-sales.png) ([click for full-size](/weblog/static/geo-sales.png)) --><a href="geo-sales.png"><img src="geo-sales.png" border="0" width="1080" height="540"></a><p>Input:</p><ul><li>list of email addresses</li><li>country border data</li></ul><p>Vector drawn, robinson projection, gray dns resolution, circles in log scale.</p><p>Snippet:</p><div class="source"><pre><code><span class="k">def</span> <span class="nf">lerp</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span><br />    <span class="k">return</span> <span class="n">x1</span> <span class="o">+</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">-</span> <span class="n">x1</span> <span class="p">)</span> <span class="o">*</span> <span class="n">p</span><br /><br /><span class="k">def</span> <span class="nf">get_plen_pdfe</span><span class="p">(</span><span class="n">latitude</span><span class="p">):</span><br />    <span class="n">latitude</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">latitude</span><span class="p">)</span><br />    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">table</span><span class="p">):</span><br />        <span class="n">deg1</span><span class="p">,</span> <span class="n">plen1</span><span class="p">,</span> <span class="n">pdfe1</span> <span class="o">=</span> <span class="n">row</span><br />        <span class="k">if</span> <span class="n">latitude</span> <span class="o">&gt;=</span> <span class="n">deg1</span><span class="p">:</span><br />            <span class="n">deg2</span><span class="p">,</span> <span class="n">plen2</span><span class="p">,</span> <span class="n">pdfe2</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><br />            <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">latitude</span><span class="o">-</span><span class="n">deg1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">deg2</span><span class="o">-</span><span class="n">deg1</span><span class="p">)</span><br />            <span class="n">plen</span> <span class="o">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">plen1</span><span class="p">,</span> <span class="n">plen2</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span><br />            <span class="n">pdfe</span> <span class="o">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">pdfe1</span><span class="p">,</span> <span class="n">pdfe2</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span><br />            <span class="k">return</span> <span class="n">plen</span><span class="p">,</span> <span class="n">pdfe</span><br /><br /><span class="c"># get robinson projection x, y</span><br /><span class="c"># origin is middle left, for now</span><br /><span class="k">def</span> <span class="nf">get_robinson_coord</span><span class="p">(</span><span class="n">longitude</span><span class="p">,</span> <span class="n">latitude</span><span class="p">):</span><br />    <span class="k">assert</span> <span class="n">longitude</span> <span class="o">&lt;=</span> <span class="mi">1</span><br />    <span class="k">assert</span> <span class="n">latitude</span> <span class="o">&lt;=</span> <span class="mi">1</span><br />    <span class="n">plen</span><span class="p">,</span> <span class="n">pdfe</span> <span class="o">=</span> <span class="n">get_plen_pdfe</span><span class="p">(</span><span class="n">latitude</span><span class="p">)</span><br /><br />    <span class="n">long_start</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">plen</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><br />    <span class="n">x</span> <span class="o">=</span> <span class="n">long_start</span> <span class="o">+</span> <span class="n">longitude</span> <span class="o">*</span> <span class="n">plen</span><br />    <span class="n">y</span> <span class="o">=</span> <span class="n">pdfe</span><br />    <span class="k">if</span> <span class="n">latitude</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span><br />        <span class="n">y</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><br /><br />    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><br /></code></pre></div>  <!-- http://xkcd.com/713/ -->         </div>`,
    'title' : "geo sales",
    'published' : "2012-04-27T12:15:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['geo sales'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">         <p>Make increments less obvious. All places change. Same range, same values. First guess.</p><img src="source.png" width="16" height="16"> <a href="increment_unique.py">increment_unique.py</a><br><p>Simply:</p><div class="source"><pre><code><span class="k">def</span> <span class="nf">cycle</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">leap</span><span class="p">,</span> <span class="n">mod</span><span class="p">):</span><br />    <span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">leap</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span><br />    <span class="k">return</span> <span class="n">val</span><br /></code></pre></div>  <p>Example:</p><table><thead><tr><th align="left">value</th><th align="left">normal</th><th align="left">obfuscated</th></tr></thead><tbody><tr><td align="left">1000</td><td align="left"><code>bmm</code></td><td align="left"><code>qac</code></td></tr><tr><td align="left">1001</td><td align="left"><code>bmn</code></td><td align="left"><code>jqv</code></td></tr><tr><td align="left">1002</td><td align="left"><code>bmo</code></td><td align="left"><code>ljt</code></td></tr><tr><td align="left">1003</td><td align="left"><code>bmp</code></td><td align="left"><code>sid</code></td></tr><tr><td align="left">1004</td><td align="left"><code>bmq</code></td><td align="left"><code>ply</code></td></tr><tr><td align="left">1005</td><td align="left"><code>bmr</code></td><td align="left"><code>esh</code></td></tr><tr><td align="left">1006</td><td align="left"><code>bms</code></td><td align="left"><code>npb</code></td></tr><tr><td align="left">1007</td><td align="left"><code>bmt</code></td><td align="left"><code>xer</code></td></tr><tr><td align="left">1008</td><td align="left"><code>bmu</code></td><td align="left"><code>kno</code></td></tr><tr><td align="left">1009</td><td align="left"><code>bmv</code></td><td align="left"><code>mxz</code></td></tr></tbody></table>         </div>`,
    'title' : "increment unique",
    'published' : "2012-04-23T12:15:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['increment unique'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">                          <p>Access bugmenot logins on webfiltered network, using a shell account. 10 minutes.</p><p>1) Use lynx to view bugmenot source, finding:</p><div class="source"><pre><code><span class="nx">key</span> <span class="o">=</span> <span class="o">-</span><span class="mi">52</span><span class="p">;</span> <span class="c1">// unique to each page</span><br /><br /><span class="c1">// inlined username/password encode</span><br /><span class="nx">d</span><span class="p">(</span><span class="s1">&#39;VkNVZ3lueXRuc2lmbXR6eGpFbHJmbnEzaHRy&#39;</span><span class="p">);</span><br /><span class="nx">d</span><span class="p">(</span><span class="s1">&#39;Z2ViYllueXRuc2lmbXR6eGo5&#39;</span><span class="p">);</span><br /></code></pre></div>  <p>2) Use wget to get /inc/library.js?2</p><p>3) Interactive:</p><div class="source"><pre><code><span class="nx">d</span><span class="p">;</span><br /><span class="cm">/*</span><br /><span class="cm">function d(strInput) {</span><br /><span class="cm">    strInput = decoder(strInput);</span><br /><span class="cm">    var strOutput = &quot;&quot;;</span><br /><span class="cm">    var intOffset = (key + 112) / 12;</span><br /><span class="cm">    for (i = 4; i &lt; strInput.length; i++) {</span><br /><span class="cm">        thisLetter = strInput.charAt(i);</span><br /><span class="cm">        thisCharCode = strInput.charCodeAt(i);</span><br /><span class="cm">        newCharCode = thisCharCode - intOffset;</span><br /><span class="cm">        strOutput += String.fromCharCode(newCharCode);</span><br /><span class="cm">    }</span><br /><span class="cm">    document.write(strOutput);</span><br /><span class="cm">}</span><br /><span class="cm">*/</span><br /><br /><span class="nx">d</span><span class="p">(</span><span class="s1">&#39;VkNVZ3lueXRuc2lmbXR6eGpFbHJmbnEzaHRy&#39;</span><span class="p">);</span><br /><span class="c1">// console:1       ReferenceError: key is not defined</span><br /><br /><span class="nx">key</span> <span class="o">=</span> <span class="o">-</span><span class="mi">52</span><span class="p">;</span><br /><br /><span class="nx">d</span><span class="p">(</span><span class="s1">&#39;VkNVZ3lueXRuc2lmbXR6eGpFbHJmbnEzaHRy&#39;</span><span class="p">);</span><br /><span class="c1">// console:1       ReferenceError: document is not defined</span><br /><br /><span class="nb">document</span> <span class="o">=</span> <span class="p">{};</span><br /><span class="nb">document</span><span class="p">.</span><span class="nx">write</span> <span class="o">=</span> <span class="nx">print</span><span class="p">;</span><br /><br /><span class="nx">d</span><span class="p">(</span><span class="s1">&#39;VkNVZ3lueXRuc2lmbXR6eGpFbHJmbnEzaHRy&#39;</span><span class="p">);</span><br /><span class="c1">// username print here</span><br /><span class="nx">d</span><span class="p">(</span><span class="s1">&#39;Z2ViYllueXRuc2lmbXR6eGo5&#39;</span><span class="p">);</span><br /><span class="c1">// password print here</span><br /></code></pre></div>         </div>`,
    'title' : "bugmenot webfiltered",
    'published' : "2012-04-17T12:11:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['bugmenot webfiltered'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content"><p>This is a low memory, no objects, "code is data", reactive, functional, vector-scaling, immediate mode user interface library. It is written in c#, running in mono, on a cairo canvas, with vector drawn controls.</p> <p>The controls look a lot like native Windows controls, by design, but they are not.</p> <p>What does this mean?</p> <p>It means I wrote a cross-platform ui toolkit that looks familiar, can scale to different dot pitch displays, and can be used in both traditional event-driven desktop applications as well as architectures based on straightforward loops (ie. multimedia & games). The instance shown here is driven by mono+gtk user input events, not a multimedia loop.</p>
<div class="separator" style="clear: both; text-align: center;"><iframe width="119" height="208" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/DrN4ZqaJGdU/0.jpg" src="https://www.youtube.com/embed/DrN4ZqaJGdU?feature=player_embedded" frameborder="0" allowfullscreen></iframe></div></div>`,
    'title' : "imui",
    'published' : "2012-03-27T12:09:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['imui'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content"><p>Detect data from finite set with minimal reads at detection-time. No research.</p><ol><li>Preprocess: Determine the key elements I need to read for a dataset.</li><li>Detection: Read key elements and match to dictionary key.</li></ol><p>Basically:</p><div class="source"><pre><code><span class="c"># find the unique element for this dataset</span><br /><span class="k">def</span> <span class="nf">findunique1</span><span class="p">(</span><span class="n">dataset</span><span class="p">):</span><br />    <span class="n">datalen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><br />    <span class="n">datacount</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span><br />    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">datalen</span><span class="p">):</span><br />        <span class="n">values</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span><br />        <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>            <br />            <span class="n">values</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><br />        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="o">==</span> <span class="n">datacount</span><span class="p">:</span><br />            <span class="c">#print &#39;key element found&#39;, i</span><br />            <span class="k">return</span> <span class="n">i</span><br />    <span class="k">return</span> <span class="bp">None</span><br /><br /><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span><br /><span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span><br /><span class="n">z</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>    <br /><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">]</span><br /><span class="k">assert</span> <span class="n">findunique1</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><br /></code></pre></div><p>But with composite keys:</p><div class="source"><pre><code><span class="c"># find the unique element pair for this dataset</span><br /><span class="k">def</span> <span class="nf">findunique2</span><span class="p">(</span><span class="n">dataset</span><span class="p">):</span><br />    <span class="n">datalen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><br />    <span class="n">datacount</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span><br />    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">datalen</span><span class="p">):</span><br />        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">datalen</span><span class="p">):</span><br />            <span class="n">values</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span><br />            <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>            <br />                <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">])</span><br />                <span class="n">values</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><br />            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="o">==</span> <span class="n">datacount</span><span class="p">:</span><br />                <span class="c">#print &#39;key element pair found&#39;, i, j</span><br />                <span class="k">return</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><br />    <span class="k">return</span> <span class="bp">None</span><br /><br /><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><br /><span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><br /><span class="n">z</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><br /><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">]</span><br /><span class="k">assert</span> <span class="n">findunique2</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span><br /></code></pre></div><p>Final generic version:</p><div class="source"><pre><code><span class="k">def</span> <span class="nf">findunique_inner</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="n">stem</span><span class="o">=</span><span class="p">[],</span> <span class="n">indexes</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><br />    <span class="n">datalen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><br />    <span class="n">datacount</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span><br />    <span class="k">if</span> <span class="n">indexes</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span><br />        <span class="n">indexes</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">datalen</span><span class="p">)</span><br />    <span class="k">for</span> <span class="n">count</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">datalen</span><span class="p">):</span><br />        <span class="n">i</span> <span class="o">=</span> <span class="n">indexes</span><span class="p">[</span><span class="n">count</span><span class="p">]</span><br />        <span class="n">values</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span><br />        <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>                            <br />            <span class="n">stemvalues</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">stem</span><span class="p">]</span><br />            <span class="n">value</span> <span class="o">=</span> <span class="n">stemvalues</span> <span class="o">+</span> <span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><br />            <span class="n">values</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">value</span><span class="p">))</span><br />        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="o">==</span> <span class="n">datacount</span><span class="p">:</span><br />            <span class="n">index</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span> <span class="n">stem</span> <span class="o">+</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">)</span><br />            <span class="c">#print &#39;key element group found&#39;, index</span><br />            <span class="k">return</span> <span class="n">index</span><br />    <span class="k">return</span> <span class="bp">None</span><br /></code></pre></div><h3>Example</h3><img src="memorize-a.png" width="24" height="24"> <img src="memorize-b.png" width="24" height="24"> <img src="memorize-c.png" width="24" height="24"> <img src="memorize-d.png" width="24" height="24"> <p>Running my code on this dataset, I can find a single key pixel, pixel 249, at 9, 10.</p><p>Values at this pixel:</p><p>a @ 249 == (51, 50, 48)<br />b @ 249 == (0, 0, 0)<br />c @ 249 == (130, 115, 96)<br />d @ 249 == (193, 186, 180)      <br /></p>
<img src="memorize-enlarged-a-1.png" width="100" height="100">
<img src="memorize-enlarged-b-1.png" width="100" height="100">
<img src="memorize-enlarged-c-1.png" width="100" height="100">
<img src="memorize-enlarged-d-1.png" width="100" height="100">
<p>I can detect any of these four by reading this pixel.</p><p>Add another image to the set, deliberately created to force a composite key.</p><p>This image, e, has the same value at 9, 10 as image c.</p><p>e @ 249 == (130, 115, 96)</p><img src="memorize-enlarged-e-1.png" width="100" height="100"> <p>Preprocess again and the composite key is pixel 0 and pixel 296 (8, 12).</p><p>a @ 0 == (221, 217, 216)<br />b @ 0 == (221, 217, 216)<br />c @ 0 == (136, 123, 104)<br />d @ 0 == (221, 217, 216)<br />e @ 0 == (136, 123, 104)</p><p>a @ 296 == (172, 165, 159)<br />b @ 296 == (0, 0, 0)<br />c @ 296 == (184, 158, 131)<br />d @ 296 == (184, 158, 131)<br />e @ 296 == (172, 165, 159)</p><img src="memorize-enlarged-a-2.png" width="100" height="100"> <img src="memorize-enlarged-b-2.png" width="100" height="100"> <img src="memorize-enlarged-c-2.png" width="100" height="100"> <img src="memorize-enlarged-d-2.png" width="100" height="100"> <img src="memorize-enlarged-e-2.png" width="100" height="100"> <p>Now I can detect any of these five using two pixel reads.</p>         </div>`,
    'title' : "memorize data",
    'published' : "2012-03-13T12:05:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['memorize data'] = _blog_post;
/*_blog_post = {
    'content' : `
<div id="content">         <p>Wrote mclip. Automatically converts all copied text to plain text, from the task tray.</p><img src="mclip.png" width="128" height="160"><p>Win32 api:</p><div class="source"><pre><code>static extern int SetClipboardViewer(int hWndNewViewer);<br />static extern bool ChangeClipboardChain(IntPtr hWndRemove, IntPtr hWndNewNext);<br />static extern int SendMessage(IntPtr hwnd, int wMsg, IntPtr wParam, IntPtr lParam);<br />static extern IntPtr GetClipboardOwner();<br />static extern uint GetWindowThreadProcessId(IntPtr hWnd, IntPtr ProcessId);<br /></code></pre></div>         </div>`,
    'title' : "mclip",
    'published' : "2012-03-05T12:02:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['mclip'] = _blog_post;*/
_blog_post = {
    'content' : `
<div id="content">A simple test, for critics.<br /><div class="source"><pre><code><span class="k">static</span> <span class="kt">int</span> <span class="nf">OneLine</span><span class="p">()</span><br /><span class="p">{</span><br />    <span class="k">return</span> <span class="m">1</span><span class="p">;</span><br /><span class="p">}</span><br /><span class="k">static</span> <span class="kt">int</span> <span class="nf">TwoLine</span><span class="p">()</span><br /><span class="p">{</span><br />    <span class="kt">var</span> <span class="n">x</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span><br />    <span class="k">return</span> <span class="n">x</span><span class="p">;</span><br /><span class="p">}</span><br /></code></pre></div>IL:<br /><div class="source"><pre><code><span class="nl">OneLine:</span><br /><span class="nl">IL_0000:</span>  <span class="nf">ldc.i4.1</span>    <br /><span class="nl">IL_0001:</span>  <span class="nf">ret</span>         <br /><br /><span class="nl">TwoLine:</span><br /><span class="nl">IL_0000:</span>  <span class="nf">ldc.i4.2</span>    <br /><span class="nl">IL_0001:</span>  <span class="nf">stloc.0</span>     <br /><span class="nl">IL_0002:</span>  <span class="nf">ldloc.0</span>     <br /><span class="nl">IL_0003:</span>  <span class="nf">ret</span>         <br /></code></pre></div>JIT optimized assembly:<br /><div class="source"><pre><code><span class="c1">; return OneLine();</span><br /><span class="err">00000000</span>  <span class="nf">mov</span>         <span class="nb">eax</span><span class="p">,</span><span class="mi">1</span> <br /><span class="err">00000005</span>  <span class="nf">ret</span> <br /><br /><span class="c1">; return TwoLine();</span><br /><span class="err">00000000</span>  <span class="nf">mov</span>         <span class="nb">eax</span><span class="p">,</span><span class="mi">2</span> <br /><span class="err">00000005</span>  <span class="nf">ret</span> <br /></code></pre></div>Another example, <code>A</code> adds one, <code>B</code> squares.<br /><div class="source"><pre><code><span class="kt">int</span> <span class="n">a</span> <span class="p">=</span> <span class="n">A</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="m">2</span><span class="p">));</span><br /><span class="k">return</span> <span class="n">a</span><span class="p">;</span><br /></code></pre></div>vs.<br /><div class="source"><pre><code><span class="kt">int</span> <span class="n">b</span> <span class="p">=</span> <span class="n">B</span><span class="p">(</span><span class="m">2</span><span class="p">);</span><br /><span class="kt">int</span> <span class="n">a</span> <span class="p">=</span> <span class="n">A</span><span class="p">(</span><span class="n">b</span><span class="p">);</span><br /><span class="k">return</span> <span class="n">a</span><span class="p">;</span><br /></code></pre></div>Compiles to:<br /><div class="source"><pre><code><span class="c1">; int a = A(B(2));</span><br /><span class="c1">; return a;</span><br /><span class="err">00000000</span>  <span class="nf">mov</span>         <span class="nb">eax</span><span class="p">,</span><span class="mi">5</span> <br /><span class="err">00000005</span>  <span class="nf">ret</span> <br /><br /><span class="c1">; int b = B(2);</span><br /><span class="c1">; int a = A(b);</span><br /><span class="c1">; return a;</span><br /><span class="err">00000000</span>  <span class="nf">mov</span>         <span class="nb">eax</span><span class="p">,</span><span class="mi">5</span> <br /><span class="err">00000005</span>  <span class="nf">ret</span> <br /></code></pre></div>Feel free to use lines.</div>`,
    'title' : "freedom to use lines in c#",
    'published' : "2012-02-04T11:55:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['freedom to use lines in c#'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">
<p>Javascript calculator in 1.5 hours. Impromptu response to more complicated renditions.</p>
<p><img border="0" src="source.png" /><a href="jscalculator.html">full code</a>
</p>
<p>Core function:
</p>
<div class="source"><pre><code><span class="kd">function</span> <span class="nx">go</span><span class="p">(</span><span class="nx">ch</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="c1">// r1 - first operand</span><br />    <span class="c1">// r2 - second operand</span><br />    <span class="c1">// op - operator</span><br />    <span class="c1">// eq - equals</span><br />    <span class="k">switch</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span><br />    <span class="p">{</span><br />        <span class="k">case</span> <span class="s1">'r1'</span><span class="o">:</span><br />            <span class="k">if</span> <span class="p">(</span><span class="nx">isinput</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="k">if</span> <span class="p">(</span><span class="nx">r1</span><span class="o">+</span><span class="s1">''</span><span class="o">==</span><span class="s1">'0'</span><span class="p">)</span> <span class="nx">r1</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span><br />                <span class="k">if</span> <span class="p">(</span><span class="nx">isdupedot</span><span class="p">(</span><span class="nx">ch</span><span class="p">,</span> <span class="nx">r1</span><span class="p">))</span> <span class="k">break</span><span class="p">;</span><br />                <span class="nx">r1</span> <span class="o">=</span> <span class="nx">r1</span> <span class="o">+</span> <span class="s1">''</span> <span class="o">+</span> <span class="nx">ch</span><span class="p">;</span><br />                <span class="nx">display</span><span class="p">(</span><span class="nx">r1</span><span class="p">);</span>                    <br />            <span class="p">}</span><br />            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isop</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="nx">state</span> <span class="o">=</span> <span class="s1">'op'</span><span class="p">;</span><br />                <span class="nx">go</span><span class="p">(</span><span class="nx">ch</span><span class="p">);</span><br />            <span class="p">}</span><br />            <span class="k">break</span><span class="p">;</span><br />        <span class="k">case</span> <span class="s1">'op'</span><span class="o">:</span><br />            <span class="k">if</span> <span class="p">(</span><span class="nx">isinput</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span>                <br />            <span class="p">{</span><br />                <span class="nx">state</span> <span class="o">=</span> <span class="s1">'r2'</span><span class="p">;</span><br />                <span class="nx">go</span><span class="p">(</span><span class="nx">ch</span><span class="p">);</span>                    <br />            <span class="p">}</span><br />            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isop</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="nx">opch</span> <span class="o">=</span> <span class="nx">ch</span><span class="p">;</span><br />            <span class="p">}</span><br />            <span class="k">break</span><span class="p">;</span><br />        <span class="k">case</span> <span class="s1">'r2'</span><span class="o">:</span><br />            <span class="k">if</span> <span class="p">(</span><span class="nx">isinput</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="k">if</span> <span class="p">(</span><span class="nx">r2</span><span class="o">+</span><span class="s1">''</span><span class="o">==</span><span class="s1">'0'</span><span class="p">)</span> <span class="nx">r2</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span><br />                <span class="k">if</span> <span class="p">(</span><span class="nx">isdupedot</span><span class="p">(</span><span class="nx">ch</span><span class="p">,</span> <span class="nx">r2</span><span class="p">))</span> <span class="k">break</span><span class="p">;</span><br />                <span class="nx">r2</span> <span class="o">=</span> <span class="nx">r2</span> <span class="o">+</span> <span class="s1">''</span> <span class="o">+</span> <span class="nx">ch</span><span class="p">;</span><br />                <span class="nx">display</span><span class="p">(</span><span class="nx">r2</span><span class="p">);</span><br />            <span class="p">}</span><br />            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isop</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="nx">r1</span> <span class="o">=</span> <span class="nx">calc</span><span class="p">();</span><br />                <span class="nx">r2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><br />                <span class="nx">display</span><span class="p">(</span><span class="nx">r1</span><span class="p">);</span><br />                <span class="nx">state</span> <span class="o">=</span> <span class="s1">'op'</span><span class="p">;</span><br />                <span class="nx">go</span><span class="p">(</span><span class="nx">ch</span><span class="p">);</span><br />            <span class="p">}</span><br />            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">iseq</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="nx">state</span> <span class="o">=</span> <span class="s1">'eq'</span><span class="p">;</span><br />                <span class="nx">go</span><span class="p">(</span><span class="nx">ch</span><span class="p">);</span><br />            <span class="p">}</span><br />            <span class="k">break</span><span class="p">;</span><br />        <span class="k">case</span> <span class="s1">'eq'</span><span class="o">:</span><br />            <span class="k">if</span> <span class="p">(</span><span class="nx">isinput</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="nx">r1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><br />                <span class="nx">state</span> <span class="o">=</span> <span class="s1">'r1'</span><span class="p">;</span><br />                <span class="nx">go</span><span class="p">(</span><span class="nx">ch</span><span class="p">);</span><br />            <span class="p">}</span><br />            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isop</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="nx">state</span> <span class="o">=</span> <span class="s1">'op'</span><span class="p">;</span><br />                <span class="nx">go</span><span class="p">(</span><span class="nx">ch</span><span class="p">)</span><br />            <span class="p">}</span><br />            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">iseq</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span><br />            <span class="p">{</span><br />                <span class="nx">r1</span> <span class="o">=</span> <span class="nx">calc</span><span class="p">();</span>                    <br />                <span class="nx">r2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><br />                <span class="nx">display</span><span class="p">(</span><span class="nx">r1</span><span class="p">);</span>                    <br />            <span class="p">}</span><br />            <span class="k">break</span><span class="p">;</span><br />    <span class="p">}</span><br /><span class="p">}</span><br /></code></pre></div></div>`,
    'title' : "js calculator",
    'published' : "2012-01-17T11:51:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['js calculator'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">Testing animation, interpolation, input stream, gamestate. Cropped.<br /><br /><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/xIqyz7djjXA/0.jpg" frameborder="0" height="190" src="https://www.youtube.com/embed/xIqyz7djjXA?feature=player_embedded" width="300"></iframe></div><br />Snippet:<br /><div class="source"><pre><code><span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="kt">float</span><span class="p">&gt;</span> <span class="n">Interpolator</span><span class="p">(</span><span class="kt">float</span> <span class="n">start</span><span class="p">,</span> <span class="kt">float</span> <span class="n">end</span><span class="p">,</span> <span class="kt">float</span> <span class="n">duration</span><span class="p">,</span> <span class="n">FnInterp</span> <span class="n">fn</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="kt">var</span> <span class="n">dt</span> <span class="p">=</span> <span class="n">g</span><span class="p">.</span><span class="n">dt</span><span class="p">;</span><br />    <span class="kt">double</span> <span class="n">time</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span><br />    <span class="kt">double</span> <span class="k">value</span><span class="p">;</span><br />    <span class="k">while</span> <span class="p">(</span><span class="n">time</span> <span class="p">+</span> <span class="n">dt</span> <span class="p">&lt;</span> <span class="n">duration</span><span class="p">)</span><br />    <span class="p">{</span><br />        <span class="n">time</span> <span class="p">+=</span> <span class="n">dt</span><span class="p">;</span><br />        <span class="k">value</span> <span class="p">=</span> <span class="p">(</span><span class="n">time</span> <span class="p">/</span> <span class="n">duration</span><span class="p">)</span> <span class="p">*</span> <span class="p">(</span><span class="n">end</span> <span class="p">-</span> <span class="n">start</span><span class="p">);</span><br />        <span class="k">yield</span> <span class="nf">return</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="k">value</span><span class="p">;</span><br />    <span class="p">}</span><br />    <span class="k">yield</span> <span class="k">return</span> <span class="n">end</span><span class="p">;</span><br /><span class="p">}</span><br /><br /><span class="p">...</span><br /><br /><span class="k">public</span> <span class="k">static</span> <span class="kt">float</span> <span class="nf">pingpong</span><span class="p">(</span><span class="n">FnInterp</span> <span class="n">fn</span><span class="p">,</span> <span class="kt">float</span> <span class="n">start</span><span class="p">,</span> <span class="kt">float</span> <span class="n">end</span><span class="p">,</span> <span class="kt">float</span> <span class="n">time</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="k">if</span> <span class="p">(</span><span class="n">time</span> <span class="p">&lt;</span> <span class="m">0.5</span><span class="p">)</span><br />    <span class="p">{</span><br />        <span class="n">time</span> <span class="p">=</span> <span class="n">time</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span><br />        <span class="k">return</span> <span class="nf">interpolate</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">fn</span><span class="p">);</span><br />    <span class="p">}</span><br />    <span class="k">else</span><br />    <span class="p">{</span><br />        <span class="n">time</span> <span class="p">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">time</span> <span class="p">-</span> <span class="m">0.5</span><span class="p">)</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span><br />        <span class="k">return</span> <span class="nf">interpolate</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">fn</span><span class="p">);</span>                <br />    <span class="p">}</span><br /><span class="p">}</span><br /></code></pre></div></div>`,
    'title' : "k7 animation & overall tests",
    'published' : "2012-01-09T11:37:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['k7 animation & overall tests'] = _blog_post;
_blog_post = {
    'content' : `
<div id="content">Conglomerated testing of quadtree, messaging, loops, cython. Lights Out logic.<br /><br /><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/KIaNc7AJYo0/0.jpg" frameborder="0" height="480" src="https://www.youtube.com/embed/KIaNc7AJYo0?feature=player_embedded" width="480"></iframe></div><br />Snippet:<br /><div class="source"><pre><code><span class="k">def</span> <span class="nf">make_message_tile_toggle</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">spread</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span><br />    <span class="k">def</span> <span class="nf">message_tile_toggle</span><span class="p">():</span><br />        <span class="n">t</span><span class="o">.</span><span class="n">lit</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">t</span><span class="o">.</span><span class="n">lit</span><br />        <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">lit</span><span class="p">:</span><br />            <span class="n">t</span><span class="o">.</span><span class="n">sprite</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">litcolor</span><br />        <span class="k">else</span><span class="p">:</span><br />            <span class="n">t</span><span class="o">.</span><span class="n">sprite</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">unlitcolor</span><br />        <span class="k">if</span> <span class="n">spread</span><span class="p">:</span><br />            <span class="c"># also send messages to neighbors</span><br />            <span class="c"># 678</span><br />            <span class="c"># 345</span><br />            <span class="c"># 012</span><br />            <span class="n">neighbormap</span> <span class="o">=</span> <span class="p">{</span><br />                <span class="mi">0</span> <span class="p">:</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><br />                <span class="mi">1</span> <span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><br />                <span class="mi">2</span> <span class="p">:</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><br />                <span class="mi">3</span> <span class="p">:</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><br />                <span class="mi">4</span> <span class="p">:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">),</span><br />                <span class="mi">5</span> <span class="p">:</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span><br />                <span class="mi">6</span> <span class="p">:</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">),</span><br />                <span class="mi">7</span> <span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span><br />                <span class="mi">8</span> <span class="p">:</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">),</span><br />            <span class="p">}</span><br />            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">neighbormap</span><span class="p">[</span><span class="n">t</span><span class="o">.</span><span class="n">num</span><span class="p">]:</span><br />                <span class="n">neighbor</span> <span class="o">=</span> <span class="n">Game</span><span class="o">.</span><span class="n">actors</span><span class="p">[</span><span class="s">'tiles'</span><span class="p">][</span><span class="n">i</span><span class="p">]</span><br />                <span class="n">neighbor</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">make_message_tile_toggle</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">neighbor</span><span class="p">,</span><span class="bp">False</span><span class="p">))</span><br />    <span class="k">return</span> <span class="n">message_tile_toggle</span><br /></code></pre></div></div>`,
    'title' : "k8",
    'published' : "2012-01-01T11:02:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['k8'] = _blog_post;
_blog_post = {
    'content' : `
<p>a* pathfinding through perlin noise in python</p>

<a href="astar-generic-noise-perlin.png"><img border="0" src="astar-generic-noise-perlin.png"></a>`,
    'title' : "pathfinding through perlin noise",
    'published' : "2008-09-03T17:00:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['pathfinding through perlin noise'] = _blog_post;
_blog_post = {
    'content' : `
<p>Python mp3 player.</p><p>Features:</p><ul><li>familiar foobar2000 ui</li><li>run with Tk or Qt ui</li><li>fmodex sound support</li><li>spectrum visualizer</li><li>yml playlists</li><li>listening statistics</li><li>song id by hash</li><li>pyrex optimizations</li><li>ui focus on playlists</li></ul><p>Todo:</p><ul><li>acoustid fingerprint instead of custom hash</li><li>gapless playback with setSubSoundSentence</li><li>interactive interpreter/debug console</li><li>"new" qt 4.2 systrayicon support</li><li>select many tracks, show total duration in status bar</li></ul><p>Screenshot:</p><p><a href="bmuse.png"><img alt="bmuse screenshot" border="0" src="bmuse.png" /></a></p>`,
    'title' : "bmuse",
    'published' : "2006-01-01T11:09:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['bmuse'] = _blog_post;
_blog_post = {
    'content' : `
<p>24-bit javascript colorpicker from scratch</p>

<a href="colorpicker_2004_safe.png"><img border="0" src="colorpicker_2004_safe.png"></a>`,
    'title' : "color picker",
    'published' : "2004-04-21T16:54:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['color picker'] = _blog_post;
/*_blog_post = {
    'content' : `
<p>My mail client for many years, <a href="http://www.rimarts.co.jp/becky.htm">Becky! Internet Mail</a>.</p><p>A simple plugin to scroll the message view while you are in the message list.</p><p>ALT-DOWN and ALT-UP - Scroll message by line<br />ALT-PAGEUP and ALT-PAGEDOWN - Scroll message by page</p><p>This mirrors the keyboard convention of other apps.</p><p>Snippet:</p><div class="source"><pre><code><span class="kt">int</span> <span class="n">WINAPI</span> <span class="n">BKC_OnKeyDispatch</span><span class="p">(</span><span class="n">HWND</span> <span class="n">hWnd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nKey</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nShift</span><span class="p">)</span><br /><span class="p">{</span><br />    <span class="n">HWND</span> <span class="n">lphMain</span><span class="p">,</span> <span class="n">lphTree</span><span class="p">,</span> <span class="n">lphList</span><span class="p">,</span> <span class="n">lphView</span><span class="p">;</span><br />    <span class="kt">int</span> <span class="n">result</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><br /><br />    <span class="k">if</span> <span class="p">(</span><span class="n">bka</span><span class="p">.</span><span class="n">GetWindowHandles</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lphMain</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lphTree</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lphList</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lphView</span><span class="p">))</span> <span class="p">{</span><br />        <span class="k">if</span> <span class="p">(</span><span class="n">nShift</span><span class="o">==</span><span class="mh">0xfe</span><span class="p">)</span> <span class="p">{</span><br />            <span class="k">switch</span><span class="p">(</span><span class="n">nKey</span><span class="p">)</span> <span class="p">{</span><br />                <span class="k">case</span> <span class="mi">38</span><span class="o">:</span>     <span class="n">SendMessage</span><span class="p">(</span><span class="n">lphView</span><span class="p">,</span><span class="n">WM_VSCROLL</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="n">result</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><br />                <span class="k">case</span> <span class="mi">40</span><span class="o">:</span>     <span class="n">SendMessage</span><span class="p">(</span><span class="n">lphView</span><span class="p">,</span><span class="n">WM_VSCROLL</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="n">result</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><br />                <span class="k">case</span> <span class="mi">33</span><span class="o">:</span>     <span class="n">SendMessage</span><span class="p">(</span><span class="n">lphView</span><span class="p">,</span><span class="n">WM_VSCROLL</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="n">result</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><br />                <span class="k">case</span> <span class="mi">34</span><span class="o">:</span>     <span class="n">SendMessage</span><span class="p">(</span><span class="n">lphView</span><span class="p">,</span><span class="n">WM_VSCROLL</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="n">result</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><br />            <span class="p">}</span><br />        <span class="p">}</span><br />    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><br />        <span class="c1">// MessageBox(NIL,&#39;bkScrollView : GetWindowHandles Failed&#39;,&#39;bkScrollView Error&#39;,MB_OK);</span><br />    <span class="p">}</span><br /><br />    <span class="k">return</span> <span class="n">result</span><span class="p">;</span><br /><span class="p">}</span><br /></code></pre></div>`,
    'title' : "becky scrollview plugin",
    'published' : "2004-04-20T11:03:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['becky scrollview plugin'] = _blog_post;*/
_blog_post = {
    'content' : `
<p>Embedded python scripting for The Bat email client.</p><p>First, a python module, named tb, written in Delphi, giving python access to The Bat's template engine.</p><p>Functions:</p><ul><li>itemcount - return TB template item count</li><li>get - get TB template value</li><li>set - set TB template value</li><li>geti - get TB template int value</li><li>seti - set TB template int value</li><li>macro - execute TB macro</li><li>param - get TB parameter to this macro call</li><li>paramcount - return TB parameter count</li></ul><p>Second, four macros added to the template engine.</p><ul><li>PY - Execute Python code, redirects print</li><li>PYX - Evaluate Python expression, return result</li><li>EXEC - Execute DOS command, return output</li><li>TRIM - Trim whitespace, return result</li></ul><p>The python module is automatically imported for PY and PYX macros.</p><p>Example/tests:</p><div class="source"><pre><code><span class="o">%</span><span class="n">Py</span><span class="p">(</span><span class="s">&quot;</span><br /><span class="k">print</span> <span class="n">tb</span><span class="o">.</span><span class="n">seti</span><span class="p">(</span><span class="s">&#39;cursorbody&#39;</span><span class="p">,</span><span class="mi">123</span><span class="p">)</span><br /><span class="k">print</span> <span class="n">tb</span><span class="o">.</span><span class="n">geti</span><span class="p">(</span><span class="s">&#39;cursorbody&#39;</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><br /><span class="k">print</span> <span class="n">tb</span><span class="o">.</span><span class="n">seti</span><span class="p">(</span><span class="s">&#39;xyz&#39;</span><span class="p">,</span><span class="mi">111</span><span class="p">)</span><br /><span class="k">print</span> <span class="n">tb</span><span class="o">.</span><span class="n">geti</span><span class="p">(</span><span class="s">&#39;xyz&#39;</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><br /><span class="k">print</span> <span class="n">tb</span><span class="o">.</span><span class="n">geti</span><span class="p">(</span><span class="s">&#39;cursorbody&#39;</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><br /><span class="s">&quot;)</span><br /><br /><span class="o">%</span><span class="n">Exec</span><span class="p">(</span><span class="s">&quot;uptime&quot;</span><span class="p">)</span><br /><br /><span class="o">%</span><span class="n">Py</span><span class="p">(</span><span class="s">&quot;</span><br /><span class="n">tb</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;from&#39;</span><span class="p">,</span><span class="s">&#39;foonus@example.com&#39;</span><span class="p">)</span><br /><span class="k">print</span> <span class="n">tb</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;from&#39;</span><span class="p">)</span><br /><span class="k">print</span> <span class="n">tb</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;215&#39;</span><span class="p">)</span><br /><span class="s">&quot;)</span><br /><br /><span class="o">%</span><span class="n">Py</span><span class="p">(</span><span class="s">&quot;</span><br /><span class="n">tb</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;215&#39;</span><span class="p">,</span><span class="s">&#39;set@example.com&#39;</span><span class="p">)</span><br /><span class="s">&quot;)</span><br /><br /><span class="o">%</span><span class="n">Py</span><span class="p">(</span><span class="s">&quot;</span><br /><span class="k">print</span> <span class="s">&#39;m:&#39;</span><span class="o">+</span><span class="n">tb</span><span class="o">.</span><span class="n">macro</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%%</span><span class="s">FROM&#39;</span><span class="p">)</span><br /><span class="k">print</span> <span class="s">&#39;v:&#39;</span><span class="o">+</span><span class="n">tb</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="s">&#39;FROM&#39;</span><span class="p">)</span><br /><span class="k">print</span> <span class="s">&#39;g:&#39;</span><span class="o">+</span><span class="n">tb</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;215&#39;</span><span class="p">)</span><br /><span class="k">print</span> <span class="s">&#39;g:&#39;</span><span class="o">+</span><span class="n">tb</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;from&#39;</span><span class="p">)</span><br /><span class="s">&quot;)</span><br /><br /><span class="o">%</span><span class="n">Py</span><span class="p">(</span><span class="s">&quot;phi = 1.618&quot;</span><span class="p">)</span><br /><span class="o">%</span><span class="n">Py</span><span class="p">(</span><span class="s">&quot;print phi&quot;</span><span class="p">)</span><br /><span class="o">%</span><span class="n">Pyx</span><span class="p">(</span><span class="s">&quot;phi&quot;</span><span class="p">)</span><br /><span class="o">%</span><span class="n">Pyx</span><span class="p">(</span><span class="s">&quot;5**5&quot;</span><span class="p">)</span><br /><br /><span class="o">%</span><span class="n">Py</span><span class="p">(</span><span class="s">&quot;</span><br /><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span><br />  <span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><br /><span class="s">&quot;)</span><br /><br /><span class="o">%</span><span class="n">Py</span><span class="p">(</span><span class="s">&quot;</span><br /><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">tb</span><span class="o">.</span><span class="n">paramcount</span><span class="p">()):</span><br />  <span class="k">print</span> <span class="s">&#39;</span><span class="si">%%</span><span class="s">d=</span><span class="si">%%</span><span class="s">s&#39;</span> <span class="o">%%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">tb</span><span class="o">.</span><span class="n">param</span><span class="p">(</span><span class="n">i</span><span class="p">))</span><br /><br /><span class="s">&quot;,123,456)</span><br /><br /><span class="o">%</span><span class="n">Py</span><span class="p">(</span><br /><span class="s">&quot;</span><br /><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span><br /><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;TMDAHOST&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;yourmailserver.com&#39;</span><br /><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;TMDANAME&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;yourname&#39;</span><br /><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;TMDAUSER&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;yourname&#39;</span><br /><br /><span class="kn">from</span> <span class="nn">TMDA.Address</span> <span class="kn">import</span> <span class="n">DatedAddress</span><br /><br /><span class="n">tb</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;replyto&#39;</span><span class="p">,</span><span class="nb">str</span><span class="p">(</span><span class="n">DatedAddress</span><span class="p">()</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s">&#39;yourmail@example.com&#39;</span><span class="p">,</span><span class="s">&#39;5d&#39;</span><span class="p">)))</span><br /><span class="s">&quot;</span><br /><span class="p">)</span><br /></code></pre></div>`,
    'title' : "tbpyxie",
    'published' : "2004-02-05T11:01:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['tbpyxie'] = _blog_post;
/*_blog_post = {
    'content' : `
<p>Netflix website automation.</p><p>1) This script orders your queue by recommendation rating.</p><p><img alt="source glyph" src="source.png" /> <a href="orderq.py">orderq.py</a></p><p>2) Browser.py - 100 lines of header/cookie/session handling. Mimic a real browser.</p><div class="source"><pre><code><span class="n">web</span> <span class="o">=</span> <span class="n">Browser</span><span class="p">()</span><br /><br /><span class="n">web</span><span class="o">.</span><span class="n">visit</span><span class="p">(</span><span class="s">&#39;https://www.netflix.com/Login&#39;</span><span class="p">)</span><br /><span class="n">body</span> <span class="o">=</span> <span class="p">{</span><br />  <span class="s">&#39;nextpage&#39;</span><span class="p">:</span><span class="s">&#39;https://www.netflix.com/Default&#39;</span><span class="p">,</span><br />  <span class="s">&#39;email&#39;</span><span class="p">:</span><span class="n">username</span><span class="p">,</span><br />  <span class="s">&#39;movieid&#39;</span><span class="p">:</span><span class="s">&#39;&#39;</span><span class="p">,</span><br />  <span class="s">&#39;trkid&#39;</span><span class="p">:</span><span class="s">&#39;&#39;</span><span class="p">,</span>    <br />  <span class="s">&#39;password1&#39;</span><span class="p">:</span><span class="n">password</span><span class="p">,</span><br />  <span class="s">&#39;SubmitButton&#39;</span><span class="p">:</span><span class="s">&#39;Click Here to Continue&#39;</span><span class="p">,</span><br /><span class="p">}</span>  <br /><span class="n">web</span><span class="o">.</span><span class="n">visit</span><span class="p">(</span><span class="s">&#39;https://www.netflix.com/Login&#39;</span><span class="p">,</span><span class="s">&#39;POST&#39;</span><span class="p">,</span><span class="n">body</span><span class="p">)</span><br /><br /><span class="n">web</span><span class="o">.</span><span class="n">visit</span><span class="p">(</span><span class="s">&#39;https://www.netflix.com/Queue&#39;</span><span class="p">)</span><br /></code></pre></div>  <p>3) NetflixQueue - 30 lines, parse netflix queue and movie properties from html with regex.</p><p><img alt="source glyph" src="source.png" /> <a href="NetflixMovieRX.txt">NetflixMovieRX.txt</a><br /><img alt="source glyph" src="source.png" /> <a href="NetflixQueueRX.txt">NetflixQueueRX.txt</a></p>`,
    'title' : "netflix",
    'published' : "2004-01-01T10:55:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['netflix'] = _blog_post;*/
_blog_post = {
    'content' : `
<p>Rewrite of my playtime winamp plugins for foobar2000, in the required C++.</p><p>Stores listening statistics, ratings, and comments in MSSQL via ADO.</p><p>The usual hotkey mapping via foobar configuration.</p><!--![foo_playtime](/weblog/static/foo_playtime.png)--> <a href="foo_playtime.png"><img src='foo_playtime.png' border=0></a>`,
    'title' : "playtime for foobar",
    'published' : "2003-11-01T10:51:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['playtime for foobar'] = _blog_post;
_blog_post = {
    'content' : `
<p>Display realtime hattrick match visuals from finite set live text commentary.</p><p>Combined lots of my existing software for quick results.</p><p>Original process, using pre-existing components:</p><ol><li>Internet Explorer plugin, ieFilter, written in Delphi</li><li>IE plugin pipes through local php runtime</li><li>PHP generates Lua-like script and calls webservice</li><li>Coldfusion webservice runs Delphi CF plugin</li><li>Delphi CF plugin, via embedded Lua, modified in C, runs script</li><li>Lua-like script creates image using wrapped Delphi code</li></ol><p>Later process, simplified with newer components:</p><ol><li>Internet Explorer plugin, ieSnake, written in Delphi</li><li>IE plugin, via embedded Python, calls CDLL</li><li>Delphi CDLL, via embedded Lua, modified in C, runs script</li><li>Lua-like script creates image using wrapped Delphi code</li></ol><p>And lots of regular expressions.</p><style>#legend .swatch {     display:inline-block;     width:20px;     height:10px;     border:1px solid gray; } </style> <h3>Legend</h3><p id=legend>Lines:<br><br><span class=swatch style="background-color:rgb(255,255,255)"></span> pass<br><span class=swatch style="background-color:rgb(255,255,0)"></span> set piece<br><span class=swatch style="background-color:rgb(161,27,27)"></span> home goal<br><span class=swatch style="background-color:rgb(0,102,204)"></span> away goal<br><span class=swatch style="background-color:rgb(48,48,48)"></span> miss/block/stop<br> <br> Rings:<br><br><span class=swatch style="background-color:rgb(255,255,0)"></span> yellow card<br><span class=swatch style="background-color:rgb(255,0,0)"></span> red card<br><span class=swatch style="background-color:rgb(169,86,200)"></span> bruised<br><span class=swatch style="background-color:rgb(255,0,0); width:10px; padding:0; margin:0; border-right:0;"></span><span class=swatch style="background-color:rgb(255,255,255); width:10px; padding:0; margin:0;"></span> injured<br><span class=swatch style="background-color:rgb(159,182,159)"></span> low stamina<br><span class=swatch style="background-color:rgb(198,255,129)"></span> low experience<br><span class=swatch style="background-color:rgb(0,0,0)"></span> player could not be replaced<br></p> <h3>Results</h3><!--![](/weblog/static/hattrick-overviewer-4584566.png) ![](/weblog/static/hattrick-overviewer-4058685.png) ![](/weblog/static/hattrick-overviewer-3612151.png) ![](/weblog/static/hattrick-overviewer-4904365.png)--> <p><img alt="" src="hattrick-overviewer-4922492.png" /></p>`,
    'title' : "hattrick overviewer",
    'published' : "2003-10-21T10:47:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['hattrick overviewer'] = _blog_post;
_blog_post = {
    'content' : `
<p>Another plugin for IE. Proxy web content with embedded Python.</p><div class="source"><pre><code><span class="k">try</span><br />  <span class="n">S</span> <span class="o">:=</span> <span class="n">PyModule</span><span class="o">.</span><span class="n">hook</span><span class="p">(</span><span class="k">string</span><span class="p">(</span><span class="n">Url</span><span class="p">)</span><span class="o">,</span><span class="n">Ts</span><span class="o">.</span><span class="n">DataString</span><span class="p">)</span><span class="o">;</span><br /><span class="k">except</span><br />  <span class="k">on</span> <span class="n">e</span><span class="o">:</span><span class="n">Exception</span> <span class="k">do</span> <span class="k">begin</span><br />    <span class="n">S</span> <span class="o">:=</span> <span class="s">&#39;&lt;b&gt;&#39;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="n">Message</span> <span class="o">+</span> <span class="s">&#39;&lt;/b&gt;&#39;</span><span class="o">;</span><br />    <span class="k">for</span> <span class="n">i</span><span class="o">:=</span> <span class="n">Py</span><span class="o">.</span><span class="n">Traceback</span><span class="o">.</span><span class="n">ItemCount</span><span class="o">-</span><span class="mi">1</span> <span class="k">downto</span> <span class="mi">0</span> <span class="k">do</span> <span class="k">begin</span><br />      <span class="n">S</span> <span class="o">:=</span> <span class="n">S</span> <span class="o">+</span> <span class="s">&#39;&lt;br&gt;&#39;</span> <span class="o">+</span> <span class="n">Py</span><span class="o">.</span><span class="n">Traceback</span><span class="o">.</span><span class="n">Items</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">FileName</span> <span class="o">+</span> <span class="s">&#39; (&#39;</span> <span class="o">+</span> <span class="nb">inttostr</span><span class="p">(</span><span class="n">Py</span><span class="o">.</span><span class="n">Traceback</span><span class="o">.</span><span class="n">Items</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">LineNo</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;) : &#39;</span> <span class="o">+</span> <span class="n">Py</span><span class="o">.</span><span class="n">Traceback</span><span class="o">.</span><span class="n">Items</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Context</span><span class="o">;</span><br />    <span class="k">end</span><span class="o">;</span><br />  <span class="k">end</span><span class="o">;</span><br /><span class="k">end</span><span class="o">;</span><br /></code></pre></div>  <p>Yahoo groups hook:</p><div class="source"><pre><code><span class="kn">import</span> <span class="nn">re</span><br /><br /><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">urlv</span><span class="p">,</span><span class="n">html</span><span class="p">):</span><br /><br />  <span class="c"># automatic continue to message</span><br />  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;&lt;a href=&quot;(.*)&quot;&gt;Continue to message&lt;/a&gt;&#39;</span><span class="p">,</span><span class="n">html</span><span class="p">)</span><br />  <span class="k">if</span> <span class="n">m</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span><br />    <span class="n">html</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;[ieFilter AUTOMATED]&lt;script&gt;location.href=&quot;&#39;</span><span class="o">+</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;&quot;;&lt;/script&gt;&#39;</span><span class="p">)</span><br /><br />  <span class="c"># get rid of advertisements</span><br />  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;&lt;table border=0 cellpadding=0 cellspacing=0&gt;.*?ADVERTISEMENT.*?&lt;/table&gt;&#39;</span><span class="p">,</span><span class="n">html</span><span class="p">)</span><br />  <span class="k">if</span> <span class="n">m</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span><br />    <span class="n">html</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="s">&#39;...&#39;</span><span class="p">)</span><br /><br />  <span class="k">return</span> <span class="n">html</span><br /></code></pre></div>  <p>More elaborate hook:</p><div class="source"><pre><code><span class="kn">import</span> <span class="nn">os.path</span><br /><span class="kn">import</span> <span class="nn">sys</span><br /><br /><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">urlv</span><span class="p">,</span><span class="n">html</span><span class="p">):</span><br /><br />  <span class="c"># if hook exists for this urlv[&#39;path&#39;], call it</span><br />  <span class="n">moduledir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">[</span><span class="n">__name__</span><span class="p">]</span><span class="o">.</span><span class="n">__file__</span><span class="p">)</span><br />  <span class="n">hookfile</span> <span class="o">=</span> <span class="n">moduledir</span><span class="o">+</span><span class="s">&#39;/hattrick/&#39;</span><span class="o">+</span><span class="n">urlv</span><span class="p">[</span><span class="s">&#39;path&#39;</span><span class="p">]</span><span class="o">+</span><span class="s">&#39;.py&#39;</span><br />  <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">hookfile</span><span class="p">):</span><br />    <span class="n">namespace</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;html&#39;</span><span class="p">:</span><span class="n">html</span><span class="p">,</span><span class="s">&#39;moduledir&#39;</span><span class="p">:</span><span class="n">moduledir</span><span class="p">}</span><br />    <span class="nb">execfile</span><span class="p">(</span><span class="n">hookfile</span><span class="p">,</span><span class="n">namespace</span><span class="p">)</span><br />    <span class="n">html</span> <span class="o">=</span> <span class="n">namespace</span><span class="p">[</span><span class="s">&#39;html&#39;</span><span class="p">]</span><br /><br />  <span class="k">return</span> <span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;onload=&quot;changeBanner();&quot;&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span>  <br /></code></pre></div>  <p>Providing custom player details in hattrick:<br /><a href="ieSnake-hattrick1.png"><img alt="" src="ieSnake-hattrick1.png" border=0></a></p><p>And a custom transfer list:<br /><a href="ieSnake-hattrick2.png"><img alt="" src="ieSnake-hattrick2.png" border=0></a></p>`,
    'title' : "ieSnake",
    'published' : "2003-02-23T10:41:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['ieSnake'] = _blog_post;
_blog_post = {
    'content' : `
<p>A plugin for IE. Pipe web content through local php runtime.</p><p>Example, custom hattrick interface:</p><div class="source"><pre><code><span class="cp">&lt;?</span> <span class="k">require_once</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;DOCUMENT_ROOT&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;/hattrick/lib/player.php&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span><br /><span class="cp">&lt;?</span> <span class="k">require_once</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;DOCUMENT_ROOT&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;/hattrick/lib/skills.php&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span><br /><span class="cp">&lt;?</span> <span class="k">require_once</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;DOCUMENT_ROOT&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;/hattrick/lib/positions.php&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span><br /><br /><span class="cp">&lt;?</span><br /><br />    <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">];</span> <br /><br />    <span class="c1">// find start</span><br />    <span class="k">if</span> <span class="p">(</span> <span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;^([0-9]+)(\.)m&#39;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$m</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span><br />        <span class="nv">$data</span> <span class="o">=</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span><span class="nv">$m</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span><br />    <span class="p">}</span><br /><br />    <span class="nv">$entries</span> <span class="o">=</span> <span class="nb">preg_split</span><span class="p">(</span><span class="s1">&#39;^([0-9]+)(\.)m&#39;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span><br />    <span class="nb">array_shift</span><span class="p">(</span><span class="nv">$entries</span><span class="p">);</span><br />    <span class="k">foreach</span><span class="p">(</span> <span class="nv">$entries</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span> <span class="p">)</span> <span class="p">{</span><br />        <span class="nv">$player</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Player</span><span class="p">;</span><br />        <span class="nv">$player</span><span class="o">-&gt;</span><span class="na">importfromtransferlist</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span><br />        <span class="k">if</span> <span class="p">(</span><span class="nv">$player</span><span class="o">-&gt;</span><span class="na">getage</span><span class="p">()</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br />            <span class="nv">$player</span><span class="o">-&gt;</span><span class="na">printdetails</span><span class="p">();</span><br />        <span class="p">}</span><br />    <span class="p">}</span><br /><br /><span class="cp">?&gt;</span><span class="x"></span><br /></code></pre></div>  <p>Output:</p><p><a href="ieFilter-hattrick.png"><img alt="" src="ieFilter-hattrick.png" border=0></a></p>`,
    'title' : "ieFilter",
    'published' : "2002-12-25T10:39:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['ieFilter'] = _blog_post;
_blog_post = {
    'content' : `
<p>Focus friendly reminder.</p>
<p><a href="remind.png"><img alt="" src="remind.png" border=0></a></p>`,
    'title' : "remind",
    'published' : "2002-01-01T10:37:00.000-05:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['remind'] = _blog_post;
_blog_post = {
    'content' : `
<p>Autosaving rtf/text notekeeping. Folders are folders. Files are files. Map root directories in ini.</p><p>
<a href="silva.png"><img alt="" src="silva.png" border=0></a>
</p>`,
    'title' : "silva",
    'published' : "2001-06-15T10:35:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['silva'] = _blog_post;
_blog_post = {
    'content' : `
<p>Two scripts for the Bersirc IRC client in Object Pascal Script.</p><p><a href="WinampAPI.ops">WinampAPI.ops</a> &ndash; General purpose Winamp 2 API wrapper.</p><p><a href="WinampZ.ops">WinampZ.ops</a> &ndash; The minimal WinampZ script itself.</p><p>Commands Introduced:</p><p>Announce track: /song, /z<br />Advertise track: /songa, /za<br />Play random track: /rand, /zr<br />Open winamp file dialog: /open, /zz<br />Send track to nick: /send <nick>, /zs <nick><br />Get track from advertiser: /ctcp <advertisernick> !ZGET<br />Toggle zget functionality: /zget      <br /></p><p>Snippet:</p><div class="source"><pre><code><span class="c1">// Random Play</span><br /><span class="k">procedure</span> <span class="nf">zr</span><span class="o">;</span><br /><span class="k">var</span> <span class="n">oldShuffle</span><span class="o">:</span> <span class="kt">boolean</span><span class="o">;</span><br /><span class="k">begin</span><br />  <span class="c1">// open winamp if it is not already</span><br />  <span class="k">if</span> <span class="p">(</span><span class="n">WA_IsRunning</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">then</span><br />  <span class="k">begin</span><br />    <span class="n">WA_Start</span><span class="o">;</span><br />    <span class="nb">Sleep</span><span class="p">(</span><span class="n">WA_DELAY_START</span><span class="p">)</span><span class="o">;</span><br />  <span class="k">end</span><span class="o">;</span><br /><br />  <span class="c1">// do the shuffle</span><br />  <span class="n">oldShuffle</span> <span class="o">:=</span> <span class="n">WA_GetShuffle</span><span class="o">;</span><br />  <span class="k">if</span> <span class="p">(</span><span class="n">WA_GetShuffle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">then</span><br />    <span class="n">WA_SetShuffle</span><span class="p">(</span><span class="k">true</span><span class="p">)</span><span class="o">;</span><br />  <span class="n">WA_TrackNext</span><span class="o">;</span><br />  <span class="n">WZ_OutputInfo</span><span class="p">(</span><span class="s">&#39;Randomized to [&#39;</span><span class="o">+</span><span class="n">WA_GetTitle</span><span class="o">+</span><span class="s">&#39;]&#39;</span><span class="p">)</span><span class="o">;</span><br />  <span class="n">WA_SetShuffle</span><span class="p">(</span><span class="n">oldShuffle</span><span class="p">)</span><span class="o">;</span><br /><br />  <span class="c1">// start playing, necessary when winamp was closed or not playing</span><br />  <span class="n">WA_TrackPlay</span><span class="o">;</span><br /><span class="k">end</span><span class="o">;</span><br /></code></pre></div>`,
    'title' : "WinampZ",
    'published' : "2001-05-22T10:31:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['WinampZ'] = _blog_post;
_blog_post = {
    'content' : `
<p>Winamp plugin. Logs winamp activity, metadata and ratings. Configurable hotkey.</p><p>v1 - 4/10/2001 - log to delimited text<br />v2 - 4/23/2001 - log to embedded database, odbc/ado access</p><p><img alt="gen_playtime_2.0_config" src="gen_playtime_2.0_config.gif" /> <img alt="gen_playtime_2.0_rate" src="gen_playtime_2.0_rate.gif" /></p>`,
    'title' : "playtime for winamp",
    'published' : "2001-04-10T10:26:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['playtime for winamp'] = _blog_post;
_blog_post = {
    'content' : `
<p>Perform recursive batch command-line operations.</p><p><a href="recurse.gif"><img alt="" src="recurse.gif" border=0></a></p>`,
    'title' : "recurse",
    'published' : "2000-08-11T10:25:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['recurse'] = _blog_post;
/*_blog_post = {
    'content' : `
<p>Make per-directory playlists recursively. Threaded for ui updates.</p>
<p><a href="playlister.png"><img alt="" src="playlister.png" border=0></a></p>`,
    'title' : "playlister",
    'published' : "2000-08-01T09:56:00.000-04:00"
    };
_blog_posts.push(_blog_post);
_blog_posts_by_title['playlister'] = _blog_post;
*/